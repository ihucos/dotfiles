#!/usr/bin/env siesta
# vim: set ft=jinja

{% set comments|run()|json %}
repo="$(gh repo view --json nameWithOwner | jq '.nameWithOwner' --raw-output)"
id="$(gh pr view --json url | jq '.url' --raw-output | cut -d/ -f7)"
gh api \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  /repos/"$repo"/pulls/"$id"/comments 
{% endset %}

{% set comments_formatted -%}
  {% for comment in comments -%}
    ## Comment from {{ comment.user.login }}
    ```
    {{ comment.body }}
    ```

    {% if comment.diff_hunk -%}
      ### Diff hunk
      ```
      {{ comment.diff_hunk }}
      ```
    {%- endif %}

    {% if comment.path -%}
      ### Path
      ```
      {{ comment.path }}
      ```
    {% endif -%}

  {%- endfor %}
{%- endset %}


{% set diff|run %}
gh pr diff
{% endset %}

{{diff}}

{% set file_contents|run|catfiles %}
gh pr view --json files | jq '.files | .[] | .path' --raw-output
{% endset %}

{{file_contents}}


{% set changes|prompt("gemini/gemini-2.5-pro-preview-06-05") %}

# Task
Apply the comments to the code, output all files with their changes

# PR Diff
```
{{diff}}
```

# PR Files
```
{{file_contents}}
```

# Comments
```
{{comments_formatted}}
```
{% endset %}



{% set changes_json|prompt("gemini/gemini-2.5-flash-preview-05-20")|code|json %}
Map the following to a JSON dict: filename -> contents
```
{{changes}}
```
{% endset %}

{% for filename, content in changes_json.items() %}
  {{ content|write(filename) }}
{% endfor %}
