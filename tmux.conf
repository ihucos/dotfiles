set -g prefix C-Space
set -g prefix2 M-Space
unbind C-b # Free the original Ctrl-b prefix keybinding
# bind C-Space send-prefix


is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind C-Space resize-pane -Z

bind r source-file ~/.tmux.conf \; display "reloaded config"

bind j split-window -v -c "#{pane_current_path}"
bind C-j split-window -v -c "#{pane_current_path}"

bind k split-window -v -c "#{pane_current_path}" \; swap-pane -U
bind C-k split-window -v -c "#{pane_current_path}" \; swap-pane -U

bind h split-window -h -c "#{pane_current_path}" \; swap-pane -U
bind C-h split-window -h -c "#{pane_current_path}" \; swap-pane -U

bind l split-window -h -c "#{pane_current_path}"
bind C-l split-window -h -c "#{pane_current_path}"

bind \; command-prompt

set -g status off

bind a swap-window -t 0
bind s swap-window -t 1
bind d swap-window -t 2
bind f swap-window -t 3
bind g swap-window -t 4

# # bind p new-window -t 21 \; select-window -t 21
# bind -n M-a  if-shell "tmux list-windows | grep '^0:'" "select-window -t 0" "new-window -t 0;"
# bind -n M-s  if-shell "tmux list-windows | grep '^1:'" "select-window -t 1" "new-window -t 1;"
# bind -n M-d  if-shell "tmux list-windows | grep '^2:'" "select-window -t 2" "new-window -t 2;"
# bind -n M-f  if-shell "tmux list-windows | grep '^3:'" "select-window -t 3" "new-window -t 3;"
# bind -n M-g  if-shell "tmux list-windows | grep '^4:'" "select-window -t 4" "new-window -t 4;"

bind J swap-pane -D
bind K swap-pane -U

bind -n M-v select-layout main-vertical \; rotate-window
# bind C-Space select-layout main-vertical \; rotate-window
# bind Space select-layout main-vertical \; rotate-window

# bind -n M-j select-window -t :-
# bind -n M-k select-window -t :+
# bind -n M-h switch-client -p
# bind -n M-l switch-client -n
bind -n M-C-h resize-pane -L 1
bind -n M-C-j resize-pane -D 1
bind -n M-C-k resize-pane -U 1
bind -n M-C-l resize-pane -R 1
# bind h set status

# rearange windows
bind m run-shell "python ~/projects/tmuxrearange.py pin"
bind M-C-m run-shell "python ~/projects/tmuxrearange.py pin"
bind M-C-h run-shell "python ~/projects/tmuxrearange.py left"
bind M-C-j run-shell "python ~/projects/tmuxrearange.py down"
bind M-C-k run-shell "python ~/projects/tmuxrearange.py up"
bind M-C-l run-shell "python ~/projects/tmuxrearange.py right"

bind b run-shell "timetrap now 2>&1 >/dev/null | grep \"not running\" > /dev/null && timetrap in  && sleep 0.1 && tmux refresh-client -S"
bind e run-shell "timetrap now 2>&1 >/dev/null | grep \"not running\" > /dev/null || timetrap out && sleep 0.1 && tmux refresh-client -S"
unbind t
bind t run-shell "t d"

# set -g default-terminal "screen-256color-italic"
set -g default-terminal "tmux"
set -g message-attr bright
set -g message-bg colour0
set -g message-fg colour5

set -g pane-active-border-bg colour5
set -g pane-active-border-fg colour5
set -g pane-border-bg colour12
set -g pane-border-fg colour12

set -g status-bg colour12
set -g status-fg colour0
set -g status-interval 3
set -g status-justify left
set -g status-left "#[bg=colour5]#{?client_prefix,  ,}#[default]"
set -g status-left-length 9999
set -g status-right-length 9999
set -g status-utf8 on

set -g visual-activity on

# automatically renumber window numbers on closing a pane (tmux >= 1.7)
set -g renumber-windows off

# set -g mode-mouse off
# set -g mouse-resize-pane off
# set -g mouse-select-pane off
# set -g mouse-select-window off

setw -g pane-base-index 1
setw -g window-status-current-bg colour12
setw -g window-status-current-fg colour0
setw -g window-status-current-format "#[bg=colour8]#[fg=colour12] #I "
setw -g window-status-format " #[bg=colour12]#[fg=colour0]#I "
setw -g window-status-current-attr bright


# some stuff from https://github.com/tmux-plugins/tmux-sensible
set -g display-time 4000
set -g history-limit 50000
# focus events enabled for terminals that support them
set -g focus-events on
set -g status-keys emacs

# maybe makes M-key flaky?
set -s escape-time 50

set -g status-right "Online: #{online_status}| Battery: #{battery_percentage} \
┃ #[bg=colour2]#(t now 2>&1 >/dev/null | grep \"not running\" > /dev/null || echo \"Timetrap:\")#[default] \
#(t now 2>&1 >/dev/null | grep \"not running\" > /dev/null && echo \"Timetrap:\") \
#(t list | grep "^*" --color=never | awk '{ print $1,$2,$3 }{print \" <DUMMY>\"}' | xargs | sed \"s/:[0-9][0-9] / /g\" | sed \"s/<DUMMY>//g\") "

#  ┃ Internet: \
# #(ping -q -w 1 -c 1 `ip r ┃ grep default ┃ cut -d ' ' -f 3` > /dev/null && echo ✔ )\
# #[fg=colour1]#(ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null || echo ✖)#[default]\
#  ┃ #[fg=colour0]♥#(acpi | cut -d ',' -f 2) ┃ Session: #[fg=colour0]#{session_name}#[default] "
set-option -g status-position top

set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-x; send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-x; send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-x; send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-x; send-keys C-l" "select-pane -R"
# bind -n M-m select-pane -t :.+

# bind -n M-i select-pane -t "top-right"
# bind -n M-u select-pane -t "top-left"
# bind -n M-m select-pane -t "bottom-right"
# bind -n M-n select-pane -t "bottom-left"

# bind s select-pane -t "top-left"
# bind d select-pane -t "top-right"
# bind f select-pane -t "bottom-left"
# bind g select-pane -t "bottom-right"

bind C-v if-shell "$is_vim" "send-keys C-l" "select-pane -R"

set -g @yank_selection "primary"

# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-online-status  \
  tmux-plugins/tmux-battery        \
  #tmux-plugins/tmux-yank           \
  tmux-plugins/tmux-copycat        \
'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
